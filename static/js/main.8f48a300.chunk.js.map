{"version":3,"sources":["components/layout/Header.js","components/layout/Button.js","components/ScoreCard.js","components/progressBar/Filler.js","components/progressBar/ProgressBar.js","components/Quiz.js","components/layout/Landing.js","App.js","reportWebVitals.js","index.js"],"names":["Header","data-test","className","Button","fn","text","disabled","onClick","Scoreboard","score","window","location","reload","Filler","percentage","style","width","ProgressBar","Quiz","data","getTenQuestion","useState","currentQuestion","setCurrentQuestion","setScore","userIsCorrect","setUserIsCorrect","madeChoice","setMadeChoice","length","reveal","correct","answersKey","choices","map","item","e","userAnswer","target","textContent","checkAnswer","question","Landing","tenQuestions","setTenQuestions","switchView","setSwitchView","initialData","questions","reformatQuestions","getRandom","q","incorrect","arr","n","result","Array","len","taken","x","Math","floor","random","App","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f48a300.chunk.js","sourcesContent":["const Header = () => {\n\treturn (\n\t\t<header data-test='component-header'>\n\t\t\t<div className='wrapper'>\n\t\t\t\t<h1 data-test='title-message'>Dustin Kelly's Tandem Code Challenge</h1>\n\t\t\t</div>\n\t\t</header>\n\t);\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Button = ({ fn, text, disabled }) => {\n\treturn (\n\t\t<button disabled={disabled} onClick={fn} className='btn'>\n\t\t\t{text}\n\t\t</button>\n\t);\n};\n\nexport default Button;\n","import Button from '../components/layout/Button';\nconst Scoreboard = ({ score }) => {\n\treturn (\n\t\t<section className='wrapper'>\n\t\t\t<div className='scoreCard'>\n\t\t\t\t<p>You got {score} out of 10 Correct</p>\n\t\t\t</div>\n\t\t\t<Button fn={() => window.location.reload()} text='Back Home' />\n\t\t</section>\n\t);\n};\n\nexport default Scoreboard;\n","import React from 'react';\n\nconst Filler = ({ percentage }) => {\n\treturn <div className='filler' style={{ width: `${percentage * 10}%` }} />;\n};\n\nexport default Filler;\n","import React from 'react';\nimport Filler from './Filler';\n\nconst ProgressBar = ({percentage}) => {\n\treturn (\n\t\t<div className='progress-bar'>\n\t\t\t<Filler percentage={percentage} />\n\t\t</div>\n\t);\n};\n\nexport default ProgressBar;\n","import { Fragment, useState } from 'react';\nimport Button from '../components/layout/Button';\nimport Scoreboard from './ScoreCard';\nimport ProgressBar from './progressBar/ProgressBar';\n\nconst Quiz = ({ data, getTenQuestion }) => {\n\tconst [currentQuestion, setCurrentQuestion] = useState(0);\n\tconst [score, setScore] = useState(0);\n\tconst [userIsCorrect, setUserIsCorrect] = useState(null);\n\tconst [madeChoice, setMadeChoice] = useState(false);\n\n\tconst nextQuestion = () => {\n\t\tconst next = currentQuestion + 1;\n\t\tsetCurrentQuestion(next);\n\t\tsetUserIsCorrect(null);\n\t\tsetMadeChoice(false);\n\t};\n\n\tconst checkAnswer = (e) => {\n\t\tsetMadeChoice(true);\n\n\t\tconst userAnswer = e.target.textContent;\n\t\tconst correctAnswer = data[currentQuestion].correct;\n\n\t\tif (correctAnswer === userAnswer) {\n\t\t\tconst currentScore = score + 1;\n\t\t\tsetScore(currentScore);\n\t\t\tsetUserIsCorrect(true);\n\t\t} else {\n\t\t\tsetUserIsCorrect(false);\n\t\t}\n\t};\n\n\tif (currentQuestion > data.length - 1)\n\t\treturn <Scoreboard getTenQuestion={getTenQuestion} score={score} />;\n\n\t// reveals to the user if they're right or wrong\n\tconst reveal = userIsCorrect ? (\n\t\t<Fragment>\n\t\t\t<p className='correct'>\n\t\t\t\t<i className='far fa-check-circle'></i> Correct\n\t\t\t</p>\n\t\t</Fragment>\n\t) : (\n\t\t<Fragment>\n\t\t\t<p className='incorrect'>\n\t\t\t\t<i className='far fa-times-circle'></i>\n\t\t\t\t{data[currentQuestion].correct}\n\t\t\t</p>\n\t\t</Fragment>\n\t);\n\n\t// map though the choices\n\tconst answersKey = data[currentQuestion].choices.map((item) => {\n\t\treturn (\n\t\t\t<Button\n\t\t\t\tkey={item}\n\t\t\t\tdisabled={madeChoice}\n\t\t\t\ttext={item}\n\t\t\t\tfn={(e) => checkAnswer(e)}\n\t\t\t/>\n\t\t);\n\t});\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<ProgressBar percentage={currentQuestion} />\n\t\t\t<div className='quiz wrapper'>\n\t\t\t\t<p className='question'>{data[currentQuestion].question}</p>\n\t\t\t\t<div className='choices'>{answersKey}</div>\n\t\t\t\t{madeChoice && reveal}\n\t\t\t\t<Button text='next question' disabled={!madeChoice} fn={nextQuestion} />\n\t\t\t</div>\n\t\t</Fragment>\n\t);\n};\n\nexport default Quiz;\n","import React, { useState } from 'react';\nimport questions from '../../data/questions.json';\nimport Button from './Button';\nimport Quiz from '../Quiz';\n\nconst Landing = () => {\n\tconst [tenQuestions, setTenQuestions] = useState(null);\n\tconst [switchView, setSwitchView] = useState(false);\n\tconst initialData = [...questions];\n\n\tconst getTenQuestion = () => {\n\t\t// grab 10 questions from the the json file\n\t\tconst tenQ = getRandom(initialData, 10);\n\n\t\t// reformat the question objects in an easier to use format while also shuffling the answer key\n\t\tconst reformatQuestions = tenQ.map((q) => {\n\t\t\treturn {\n\t\t\t\tquestion: q.question,\n\t\t\t\tchoices: getRandom([...q.incorrect, q.correct], 4),\n\t\t\t\tcorrect: q.correct,\n\t\t\t};\n\t\t});\n\n\t\tsetTenQuestions(reformatQuestions);\n\t\tsetSwitchView(true);\n\t};\n\n\t// my shuffle function didn't work that well and I found this one from stack overflow which did a much better job. I modified it slightly for my needs\n\t// https://stackoverflow.com/questions/19269545/how-to-get-a-number-of-random-elements-from-an-array/38571132#38571132\n\n\tconst getRandom = (arr, n) => {\n\t\tlet result = new Array(n),\n\t\t\tlen = arr.length,\n\t\t\ttaken = new Array(len);\n\t\tif (n > len) n = len;\n\t\twhile (n--) {\n\t\t\tlet x = Math.floor(Math.random() * len);\n\t\t\tresult[n] = arr[x in taken ? taken[x] : x];\n\t\t\ttaken[x] = --len in taken ? taken[len] : len;\n\t\t}\n\t\treturn result;\n\t};\n\n\tif (switchView)\n\t\treturn <Quiz getTenQuestion={getTenQuestion} data={tenQuestions} />;\n\n\treturn (\n\t\t<section className='wrapper' data-test='component-landing'>\n\t\t\t<h2>To get started click button below</h2>\n\t\t\t<Button text='Get Started' fn={getTenQuestion} />\n\t\t</section>\n\t);\n};\n\nexport default Landing;\n","import './App.css';\nimport Header from './components/layout/Header';\nimport Landing from './components/layout/Landing';\n\nconst App = () => {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Header title = 'Dustin Kelly Tandem Code Challenge' />\n\t\t\t\n\t\t\t\t<Landing />\n\t\t\t\n\t\t</div>\n\t);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}